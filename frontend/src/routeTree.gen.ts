/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ChatRouteImport } from './routes/chat/route'
import { Route as IndexImport } from './routes/index'
import { Route as ChatIndexImport } from './routes/chat/index'
import { Route as AuthIndexImport } from './routes/auth/index'
import { Route as ChatUsersIndexImport } from './routes/chat/users/index'
import { Route as ChatInboxIndexImport } from './routes/chat/inbox/index'
import { Route as ChatChannelIndexImport } from './routes/chat/channel/index'
import { Route as ChatChannelChannelIdImport } from './routes/chat/channel/$channelId'

// Create/Update Routes

const ChatRouteRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any)

const ChatUsersIndexRoute = ChatUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const ChatInboxIndexRoute = ChatInboxIndexImport.update({
  id: '/inbox/',
  path: '/inbox/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const ChatChannelIndexRoute = ChatChannelIndexImport.update({
  id: '/channel/',
  path: '/channel/',
  getParentRoute: () => ChatRouteRoute,
} as any)

const ChatChannelChannelIdRoute = ChatChannelChannelIdImport.update({
  id: '/channel/$channelId',
  path: '/channel/$channelId',
  getParentRoute: () => ChatRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof rootRoute
    }
    '/chat/': {
      id: '/chat/'
      path: '/'
      fullPath: '/chat/'
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof ChatRouteImport
    }
    '/chat/channel/$channelId': {
      id: '/chat/channel/$channelId'
      path: '/channel/$channelId'
      fullPath: '/chat/channel/$channelId'
      preLoaderRoute: typeof ChatChannelChannelIdImport
      parentRoute: typeof ChatRouteImport
    }
    '/chat/channel/': {
      id: '/chat/channel/'
      path: '/channel'
      fullPath: '/chat/channel'
      preLoaderRoute: typeof ChatChannelIndexImport
      parentRoute: typeof ChatRouteImport
    }
    '/chat/inbox/': {
      id: '/chat/inbox/'
      path: '/inbox'
      fullPath: '/chat/inbox'
      preLoaderRoute: typeof ChatInboxIndexImport
      parentRoute: typeof ChatRouteImport
    }
    '/chat/users/': {
      id: '/chat/users/'
      path: '/users'
      fullPath: '/chat/users'
      preLoaderRoute: typeof ChatUsersIndexImport
      parentRoute: typeof ChatRouteImport
    }
  }
}

// Create and export the route tree

interface ChatRouteRouteChildren {
  ChatIndexRoute: typeof ChatIndexRoute
  ChatChannelChannelIdRoute: typeof ChatChannelChannelIdRoute
  ChatChannelIndexRoute: typeof ChatChannelIndexRoute
  ChatInboxIndexRoute: typeof ChatInboxIndexRoute
  ChatUsersIndexRoute: typeof ChatUsersIndexRoute
}

const ChatRouteRouteChildren: ChatRouteRouteChildren = {
  ChatIndexRoute: ChatIndexRoute,
  ChatChannelChannelIdRoute: ChatChannelChannelIdRoute,
  ChatChannelIndexRoute: ChatChannelIndexRoute,
  ChatInboxIndexRoute: ChatInboxIndexRoute,
  ChatUsersIndexRoute: ChatUsersIndexRoute,
}

const ChatRouteRouteWithChildren = ChatRouteRoute._addFileChildren(
  ChatRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/auth': typeof AuthIndexRoute
  '/chat/': typeof ChatIndexRoute
  '/chat/channel/$channelId': typeof ChatChannelChannelIdRoute
  '/chat/channel': typeof ChatChannelIndexRoute
  '/chat/inbox': typeof ChatInboxIndexRoute
  '/chat/users': typeof ChatUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthIndexRoute
  '/chat': typeof ChatIndexRoute
  '/chat/channel/$channelId': typeof ChatChannelChannelIdRoute
  '/chat/channel': typeof ChatChannelIndexRoute
  '/chat/inbox': typeof ChatInboxIndexRoute
  '/chat/users': typeof ChatUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/chat': typeof ChatRouteRouteWithChildren
  '/auth/': typeof AuthIndexRoute
  '/chat/': typeof ChatIndexRoute
  '/chat/channel/$channelId': typeof ChatChannelChannelIdRoute
  '/chat/channel/': typeof ChatChannelIndexRoute
  '/chat/inbox/': typeof ChatInboxIndexRoute
  '/chat/users/': typeof ChatUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/auth'
    | '/chat/'
    | '/chat/channel/$channelId'
    | '/chat/channel'
    | '/chat/inbox'
    | '/chat/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth'
    | '/chat'
    | '/chat/channel/$channelId'
    | '/chat/channel'
    | '/chat/inbox'
    | '/chat/users'
  id:
    | '__root__'
    | '/'
    | '/chat'
    | '/auth/'
    | '/chat/'
    | '/chat/channel/$channelId'
    | '/chat/channel/'
    | '/chat/inbox/'
    | '/chat/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRouteRoute: typeof ChatRouteRouteWithChildren
  AuthIndexRoute: typeof AuthIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRouteRoute: ChatRouteRouteWithChildren,
  AuthIndexRoute: AuthIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat": {
      "filePath": "chat/route.tsx",
      "children": [
        "/chat/",
        "/chat/channel/$channelId",
        "/chat/channel/",
        "/chat/inbox/",
        "/chat/users/"
      ]
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/chat/": {
      "filePath": "chat/index.tsx",
      "parent": "/chat"
    },
    "/chat/channel/$channelId": {
      "filePath": "chat/channel/$channelId.tsx",
      "parent": "/chat"
    },
    "/chat/channel/": {
      "filePath": "chat/channel/index.tsx",
      "parent": "/chat"
    },
    "/chat/inbox/": {
      "filePath": "chat/inbox/index.tsx",
      "parent": "/chat"
    },
    "/chat/users/": {
      "filePath": "chat/users/index.tsx",
      "parent": "/chat"
    }
  }
}
ROUTE_MANIFEST_END */
